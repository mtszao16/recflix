schema {
  query: Query
  mutation: Mutation
}

type Query {
  allUsers: [User]
  allUserInteractions: [UserInteraction]
  allMovies(filter: MovieFilter): [Movie]
  allFeedbacks: [Feedback]
}

type Mutation {
  createUser(name: String!, authProvider: AuthData!): User
  signinUser(auth: AuthData): SigninPayload
  logUserInteraction(
    type: String!
    movieId: String
    amount: Int
  ): UserInteraction
  addMovie(name: String!, url: String, totalDuration: Int): Movie
  recordFeedback(rating: Int!, type: String, movieId: String): Feedback
  addWatchedMovie(movieId: String!, userId: String!): Boolean
}

extend type User {
  id: ID!
  name: String!
  email: String
  password: String
  watchedMovies: [WatchedMovie]
}

type UserInteraction {
  id: ID!
  interactionTime: String!
  interactionType: String!
  interactedBy: User!
  movieId: String
  value: Float
  amount: Int
}

type Movie {
  id: ID!
  name: String!
  url: String
  totalDuration: Int
}

type WatchedMovie {
  id: ID!
  name: String!
  url: String
  totalDuration: Int
  watchedCount: Int
  watchedDuration: Int
}

type Feedback {
  id: ID!
  rating: Int!
  type: String
  userId: String
  movieId: String
  createdAt: DateTime!
}

type SigninPayload {
  token: String
  user: User
}

input AuthData {
  email: String!
  password: String!
}

input MovieFilter {
  id: ID
  name: String
}

scalar DateTime
